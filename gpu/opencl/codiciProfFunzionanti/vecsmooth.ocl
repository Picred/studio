void kernel vecinit(
	global int * restrict v1,
	int nels)
{
	int i = get_global_id(0);

	if (i < nels) {
		v1[i] = i;
	}
}

// in : 0 1 2 3 4 5 6 7
// out: 0 1 2 3 4 5 6 6
void kernel vecsmooth(
	global const int * restrict in,
	global int * restrict out,
	int nels)
{
	int i = get_global_id(0);

#if 0
	if (i == 0 && i == get_global_id(0) - 1) {
		out[i] = in[i];
	} else if (i == 0) {
		out[i] = (in[i] + in[i+1])/2;
	} else if (i == get_global_id(0) - 1) {
		out[i] = (in[i-1] + in[i])/2;
	} else {
		// general case
		out[i] = (in[i-1] + in[i] + in[i+1])/3;
	}
#else
	if (i >= nels) return;

	int val = in[i];
	int div = 1;
	if (i > 0) {
		val += in[i-1];
		++div;
	}
	if (i < nels - 1) {
		val += in[i+1];
		++div;
	}
	out[i] = val/div;
#endif
}
