void kernel vecinit(
	global int * restrict v1,
	global int * restrict v2,
	int nels)
{
	int i = get_global_id(0);

	if (i < nels) {
		v1[i] = i;
		v2[i] = nels - i;
	}
}

// v1: 0 1 2 3 4 5 6 7
// v2: 8 7 6 5 4 3 2 1
// wi: 0 1 2 3 4 5 6 7
void kernel vecsum_v1(
	global const int * restrict v1,
	global const int * restrict v2,
	global int * restrict v3,
	int nels)
{
	int i = get_global_id(0);

	if (i < nels)
		v3[i] = v1[i] + v2[i];
}

// v1: 0 1 | 2 3 | 4 5 | 6 7
// v2: 8 7 | 6 5 | 4 3 | 2 1
// wi: 0   | 1   | 2   | 3

void kernel vecsum_v2(
	global const int2 * restrict v1,
	global const int2 * restrict v2,
	global int2 * restrict v3,
	int npairs)
{
	int i = get_global_id(0);

	if (i < npairs)
		v3[i] = v1[i] + v2[i];
}

void kernel vecsum_v4(
	global const int4 * restrict v1,
	global const int4 * restrict v2,
	global int4 * restrict v3,
	int nquarts)
{
	int i = get_global_id(0);

	if (i < nquarts)
		v3[i] = v1[i] + v2[i];
}

void kernel vecsum_v8(
	global const int8 * restrict v1,
	global const int8 * restrict v2,
	global int8 * restrict v3,
	int noct)
{
	int i = get_global_id(0);

	if (i < noct)
		v3[i] = v1[i] + v2[i];
}

void kernel vecsum_v16(
	global const int16 * restrict v1,
	global const int16 * restrict v2,
	global int16 * restrict v3,
	int nhex)
{
	int i = get_global_id(0);

	if (i < nhex)
		v3[i] = v1[i] + v2[i];
}
